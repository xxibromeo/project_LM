"use client";

import { useSearchParams, useRouter } from "next/navigation";
import { Card, Button, Divider } from "antd";
import Image from "next/image";

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
interface TimesheetData {
  siteName: string;
  siteCode: string;
  numberOfPeople: number;
  workingPeople: number;
  dailyWorkingEmployees: number;
  businessLeave: number;
  sickLeave: number;
  peopleLeave: number;
  overContractEmployee: number;
  replacementEmployee: number;
  replacementNames: string[];
  remark: string;
}

export default function SummaryPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const dataString = searchParams.get("data");

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á parsedData ‡πÄ‡∏õ‡πá‡∏ô TimesheetData ‡∏´‡∏£‡∏∑‡∏≠ null
  const parsedData: TimesheetData | null = dataString
    ? JSON.parse(decodeURIComponent(dataString))
    : null;

  // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å URL
  if (!parsedData) {
    return <p className="text-center">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>;
  }

  const fieldMapping: { [key: string]: string } = {
    date: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
    subSite: "Sub Site",
    siteCode: "Site Code",
    siteName: "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ã‡∏ï‡πå",
    numberOfPeople: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤",
    workingPeople: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô",
    dailyWorkingEmployees: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥(‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)", // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"
    businessLeave: "‡∏•‡∏≤‡∏Å‡∏¥‡∏à (‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥)",
    sickLeave: "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢ (‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥)",
    peopleLeave: "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô (‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥)",
    overContractEmployee: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤",
    replacementEmployee: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏ô‡∏á‡∏≤‡∏ô",
    replacementNames: "‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏ô‡∏á‡∏≤‡∏ô",
    remark: "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ ",
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤
  const formatValue = (val: unknown, key?: string): string => {
  if (key === "date") {
    const date = new Date(val as string);  // ‡πÉ‡∏ä‡πâ type assertion
    return date.toLocaleDateString("th-TH");
  }
  if (Array.isArray(val)) {
    const clean = val.filter((v) => v && v.trim() !== "");
    return clean.length > 0 ? clean.map((v, i) => `${i + 1}. ${v}`).join("\n") : "0";
  }
  if (val === null || val === undefined || val === "") return "0";
  return String(val);  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô string
};

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 p-6">
      <Card className="w-full max-w-3xl">
        <div className="flex flex-col items-center mb-6">
          <Image src="/logo-SO.webp" alt="Logo" width={64} height={64} />
          <h1 className="text-2xl font-bold text-[#E30613] mt-4">‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h1>
        </div>

        {/* üìù ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
          {Object.entries(parsedData)
            .filter(([k]) => k !== "nameadmin")
            .map(([k, v]) => (
              <div key={k}>
                <p className="text-[#E30613] font-semibold">{fieldMapping[k] || k}</p>
                <p className="text-black whitespace-pre-line">{formatValue(v, k)}</p>
              </div>
            ))}
        </div>

        <Divider className="my-10" />

        <div className="flex justify-center gap-6">
          <Button
            type="default"
            onClick={() =>
              router.push(`/summary/edit?data=${encodeURIComponent(JSON.stringify(parsedData))}`)
            }
          >
            ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </Button>
          <Button
            type="primary"
            onClick={() => router.push("/")}
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </Button>
        </div>
      </Card>
    </div>
  );
}
